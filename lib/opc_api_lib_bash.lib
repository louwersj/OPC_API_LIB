# NAME:
#   opc_api_lib_bash.lib
#
# DESC:
# Open Oracle Public Cloud API library - bash version. The library provide
# the basic building blocks for interacting with the API's for the Oracle
# public cloud. This specific version is for usage with bash scripting and
# has been developed and tested with Oracle Linux.
#
# LOG:
# VERSION---DATE--------NAME-------------COMMENT
# 0.1       13NOV2016   Johan Louwers    Initial upload to github.com.
# 0.2       12FEB2017   Johan Louwers    improved function paramter call.
# 0.3       25FEB2017   Johan Louwers    added errorExit function.
# 0.4       25FEB2017   Johan Louwers    added genOplanObjectStorVol function. 
#
# LICENSE:
# Copyright (C) 2016  Johan Louwers
#
# This code is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this code; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# *
# */



#-------------------------------------------------------------------------
# function errorExit is used as the generic error handling action for
# errors that are critical and require an exit. Main reason for a more
# central function is that additional logging options can easily be 
# included in future releases of the lib. Ensuring your own code will
# also use the errorExit function is good practice as all internal lib
# functions will also make use of this function. By using this function
# in your own code you will have a unified way of logging througout your
# entire code deployment.
 function errorExit () {
  echo "ERROR - SEVERITY CRITICAL - EXIT - OPC_API_LIB -  $1" 1>&2
  exit 1
 }
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
# function computeAuthenticateUser is used to retrieve the authentication
# cookie from the Oracle compute cloud API which is needed to ensure you
# can make the needed calls to the REST API. You can call this function
# every time you need a cookie value to make a call to the REST API.
#
# The function requires the following parameters inputs;
# - identity domain
# - username
# - password
# - REST-endpoint
#
 function computeAuthenticateUser () {
   ComputeCookie="$(curl -i -s -X POST -H "Content-Type: application/oracle-compute-v3+json" -d '{"user":"/Compute-'"$1"'/'"$2"'","password":"'"$3"'"}' $4/authenticate/ | grep Set-Cookie | cut -c 13-)"
   curlStatus=$?

    if [ "$curlStatus" -eq 0 ]; then
      echo $ComputeCookie
    else
        echo "ERROR"
    fi
 }
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
# Function computeRawInstanceGetAll will retrieves the names of instances
# and subcontainers that you can access in the specified container. This
# version will return the raw data as it comes from the Oracle public cloud
#
# The function requries the following parameters inputs;
# - identity domain
# - username
# - REST-endpoint
# - authCookie
#
 function computeRawInstanceGetAll () {
   apiReturnValue="$(curl -s -X GET -H "Cookie: $4" -H "Accept: application/oracle-compute-v3+json" $3/instance/Compute-$1/$2/)"
   curlStatus=$?

    if [ "$curlStatus" -eq 0 ]; then
      echo $apiReturnValue
    else
        echo "ERROR"
    fi
 }
#-------------------------------------------------------------------------



#-------------------------------------------------------------------------
# Function genOplanObjectStorVol will generate the oplan
# object specification for a storage volume in the Oracle
# compute Cloud. The object specification needs to be
# placed within the specific storage volume oplan of the
# orchestartion payload to form a valid JSON payload to
# be used as a orchestration in the Oracle Cloud.
#
# The function requries the following parameters inputs
# in this order;
# - (1) identity domain
# - (2) username
# - (3) volume name (max 256 char)
# - (4) bootable flag string (true/false)
# - (5) image list (name) provide NULL if not needed
# - (6) image list version (ID) provide NULL if not needed
# - (7) latency (standard or low)
# - (8) storage size including indicator
#   - indicator can be B, K, M, G or T (upper or lower)
# - (9) description max 256 char)
 function genOplanObjectStorVol () {


# function specific variables
  funcParamsExpected=9
  funcName="genOplanObjectStorVol"


# function paramater checking to ensure we recieved the
# correct number of parameters and execute a certain
# level of content checking on the paramter content.
  if [ "$#" -ne $funcParamsExpected ]
  then
    errorExit "Function $funcName did not recieve the expected number of paramaters."
  elif [ "${#3}" -gt 256 ]
  then
    errorExit "Function $funcName received paramater 3 (volume name) is longer than allowed (max 256 chars)."
  elif [ "$4" != "true" ] && [ "$4" != "false" ]
  then
    errorExit "Function $funcName received paramater 4 (bootable flag) with incorrect value. Value given: $4."
  elif [ "$7" != "default" ] && [ "$7" != "low" ]
  then
    errorExit "Function $funcName received paramater 7 (latency) with value other than -default- or -low-. Value given $7."
  elif echo "B K M G T b k m g t" | grep -v ${8: -1} > /dev/null;
  then
    errorExit "Function $funcName received paramater 8 (storage size) with an incorrect value indicator. Value given $8."
  elif [ "${#9}" -gt 256 ]
  then
    errorExit "Function $funcName received paramater 9 (description) is longer than allowed (max 256 chars)."
 fi


# define which storage properties we need to include
# based upon the value of parameter 7 (latency). This
# will later be used to populate the JSON value inside
# the jsonAttrProperties variable which is used in the
# generation of the JSON payload.
  if [ "$7" == "default" ]
  then
   valueProperties="/oracle/public/storage/default"
  elif [ "$7" == "low" ]
  then
   valueProperties="/oracle/public/storage/latency"
  else
   errorExit "Function $funcName encounterd an issue while setting valueProperties for storage latency"
  fi


# build the different JSON attributes to be used in
# the JSON payload generation. In some cases variables
# will be empty (for example imagelist in case bootable
# is set to false).
  jsonAttrName=" "\""name"\"": "\""/Compute-$1/$2/$3"\"","
  jsonAttrBootable=" "\""bootable"\"": "\""$4"\"","
  jsonAttrImagelist=""
  jsonAttrImagelistEntry=""
   if [ "$4" == "true" ]
   then
    jsonAttrImagelist=" "\""imagelist"\"": "\""$5"\""",
    jsonAttrImagelistEntry=" "\""imagelist_entry"\"": "\""$6"\""",
   fi
  jsonAttrProperties=" "\""properties"\"": ["\""$valueProperties"\""],"
  jsonAttrSize=" "\""size"\"": "\""$8"\"","
  jsonAttrDescription=" "\""description"\"": "\""$9"\"""


# Generate the JSON payLoad for the actual object
# creation of a storage volume.
  read -d '' generatedJson << EOF
   {
   $jsonAttrName
   $jsonAttrBootable
   $jsonAttrImagelist
   $jsonAttrImagelistEntry
   $jsonAttrProperties
   $jsonAttrSize
   $jsonAttrDescription
   }
EOF

echo $generatedJson
 }
 #-------------------------------------------------------------------------
